import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
import { PineconeStore } from "@langchain/pinecone";

import { OpenAI, OpenAIEmbeddings } from "@langchain/openai";
import { RecursiveCharacterTextSplitter } from "@langchain/textsplitters";
import { Document } from "langchain/document";

export const indexName = "headstarter-rag-app";
export const timeout = 80000;

export const createPineconeIndex = async (
  client: any,
  indexName: string,
  vectorDimension: number
) => {
  // 1. Initiate index existence check
  console.log(`Checking "${indexName}"...`);
  // 2. Get list of existing indexes
  const existingIndexes = await client.listIndexes();
  console.log(existingIndexes);
  // 3. If index doesn't exist, create it
  if (!existingIndexes.indexes.includes(indexName)) {
    // 4. Log index creation initiation
    console.log(`Creating "${indexName}"...`);
    // 5. Create index
    try {
      await client.createIndex({
        name: indexName, // The name of the index (string)
        dimension: vectorDimension, // The dimension of the vectors (number)
        metric: "cosine", // The metric to use for similarity (string)
        spec: {
          serverless: {
            cloud: "aws", // Cloud provider (string)
            region: "us-east-1", // Region (string)
          },
        },
      });
      console.log("Index created successfully");
    } catch (error) {
      console.error("Error creating index:", error);
    }
    // 6. Log successful creation
    console.log(
      `Creating index.... please wait for it to finish initializing.`
    );
    // 7. Wait for index initialization
    await new Promise((resolve) => setTimeout(resolve, timeout));
  } else {
    // 8. Log if index already exists
    console.log(`"${indexName}" already exists.`);
  }
};


const API_KEY = "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";

const MODEL = "jinaai/jina-embeddings-v2-base-en";

async function query(data: string[]) {
  const response = await fetch(
    `https://api-inference.huggingface.co/models/${MODEL}`,
    {
      headers: {
        Authorization: `Bearer ${API_KEY}`,
        "Content-Type": "application/json",
      },
      method: "POST",
      body: JSON.stringify(data),
    }
  );
  const result = await response.json();
  return result;
}

export const updatePinecone = async (client: any, indexName: string, docs: Document[]) => {
  console.log("Retrieving Pinecone index...");
  // 1. Retrieve Pinecone index
  const index = client.Index(indexName);
  // 2. Log the retrieved index name
  console.log(`Pinecone index retrieved: ${indexName}`);
  // 3. Process each document in the docs array
  for (const doc of docs) {
    console.log(`Processing document: ${doc.metadata.source}`);
    const txtPath = doc.metadata.source;
    const text = doc.pageContent;
    // 4. Create RecursiveCharacterTextSplitter instance
    const textSplitter = new RecursiveCharacterTextSplitter({
      chunkSize: 1000,
    });
    console.log("Splitting text into chunks...");
    // 5. Split text into chunks (documents)
    const chunks = await textSplitter.createDocuments([text]);
    console.log(`Text split into ${chunks.length} chunks`);
    console.log(
      `Calling OpenAI's Embedding endpoint documents with ${chunks.length} text chunks ...`
    );
    // 6. Create OpenAI embeddings for documents
    // const embeddingsArrays = await new OpenAIEmbeddings().embedDocuments(
    //   chunks.map((chunk) => chunk.pageContent.replace(/\n/g, " "))
    // );
    // console.log("Finished embedding documents");
    // console.log(
    //   `Creating ${chunks.length} vectors array with id, values, and metadata...`
    // );

    const embeddingsArrays = [
      -0.02287699468433857, -0.054278355091810226, -0.007024618797004223,
      0.04492451250553131, 0.000791068421676755, 0.010826517827808857,
      0.027839653193950653, 0.02458116225898266, -0.03536146506667137,
      0.01995156705379486, -0.0364547036588192, -0.03104471042752266,
      -0.013347620144486427, -0.022547265514731407, -0.0008942825952544808,
      -0.007808150723576546, 0.05693564936518669, 0.04430374503135681,
      0.004130546934902668, -0.013433660380542278, -0.015124795027077198,
      0.006100682076066732, -0.024537397548556328, -0.025524139404296875,
      -0.023656411096453667, 0.07875687628984451, 0.0652797520160675,
      0.048217982053756714, 0.05686545372009277, 0.0556202195584774,
      0.014021554030478, -0.00178441999014467, 0.0013341606827452779,
      0.02825353667140007, 0.032451510429382324, -0.03563898429274559,
      0.0019722660072147846, 0.0014911774778738618, -0.01606624759733677,
      0.035554274916648865, -0.04014989733695984, 0.023582663387060165,
      0.006480013485997915, -0.02580033242702484, -0.026675578206777573,
      -0.04506342113018036, 0.020547088235616684, 0.011685391888022423,
      -0.03729911521077156, 0.030929159373044968, -0.007260710932314396,
      -0.011066918261349201, 0.023784788325428963, 0.04923666641116142,
      0.019466586410999298, 0.01844169571995735, 0.05891023576259613,
      0.028370844200253487, -0.032579533755779266, 0.06081384792923927,
      -0.020412791520357132, 0.0016385375056415796, 0.04520656540989876,
      -0.006623989436775446, 0.00411565974354744, 0.05117534473538399,
      0.03676128759980202, -0.07027298212051392, 0.011541983112692833,
      0.010919694788753986, 0.03157127648591995, 0.02277878299355507,
      0.026057511568069458, -0.003295017872005701, -0.007866540923714638,
      -0.04671831801533699, -0.025898616760969162, 0.018769539892673492,
      0.027419311925768852, 0.0024367121513932943, -0.009941325522959232,
      -0.0062333326786756516, 0.061250392347574234, -0.014308891259133816,
      -0.0470762774348259, -0.061009038239717484, -0.03019370324909687,
      0.022285057231783867, 0.0071855029091238976, -0.08451291918754578,
      0.028099780902266502, -0.017414864152669907, -0.010725298896431923,
      0.05297901853919029, 0.052955325692892075, 0.009463454596698284,
      -0.007737577892839909, -0.03198530152440071, -0.0751858502626419,
      0.014959536492824554, -0.05331125482916832, 0.043785758316516876,
      -0.039159346371889114, 0.04159778356552124, 0.006221387535333633,
      -0.011553582735359669, -0.01995396986603737, 0.006745466962456703,
      0.004230629187077284, 0.005176188889890909, -0.058800194412469864,
      -0.004845274146646261, -0.03976104035973549, 0.003068651305511594,
      0.012157313525676727, 0.017641132697463036, 0.0008123171282932162,
      -0.006833116058260202, -0.06490596383810043, -0.016971446573734283,
      0.027779310941696167, 0.03796641156077385, -0.014604795724153519,
      -0.08175206184387207, 0.019957737997174263, -0.028208216652274132,
      0.05177595093846321, -0.0271916501224041, 0.04599660634994507,
      -0.04854391887784004, 0.05688340216875076, -0.008781086653470993,
      0.05202120169997215, 0.018730908632278442, 0.018649153411388397,
      -0.06656864285469055, 0.00724668987095356, -0.004001345485448837,
      -0.04950261861085892, 0.008284250274300575, -0.06294174492359161,
      -0.013357102870941162, 0.052160605788230896, 0.04075057432055473,
      0.008953017182648182, -0.007669215090572834, 0.032219745218753815,
      0.03360414132475853, -0.0012879937421530485, -0.0508500412106514,
      0.03668854013085365, 0.005267087835818529, -0.011489301919937134,
      0.06994808465242386, -0.02865992859005928, -0.039211299270391464,
      -0.003630224382504821, 0.0401138998568058, 0.028363652527332306,
      -0.013095594011247158, 0.014871504157781601, -0.00907056126743555,
      -0.020484359934926033, -0.0018252816516906023, 0.030476296320557594,
      -0.0440811812877655, 0.047245465219020844, -0.020762784406542778,
      0.09219249337911606, -0.003853223519399762, -0.013615351170301437,
      -0.016026709228754044, -0.016097888350486755, -0.03323977440595627,
      0.008190115913748741, -0.003541523590683937, 0.02009321190416813,
      0.012123972177505493, 0.03219561278820038, -0.03411046788096428,
      0.029707660898566246, -0.003501847153529525, 0.051493704319000244,
      -0.04863884672522545, -0.011129994876682758, -0.050576988607645035,
      0.052500784397125244, 0.010279359295964241, -0.012798198498785496,
      0.037447232753038406, -0.03831656649708748, -0.08111809194087982,
      -0.014804312027990818, -0.014768454246222973, 0.04577811062335968,
      -0.03793695941567421, -0.0561002641916275, 0.02471139281988144,
      0.010981401428580284, -0.06042167544364929, -0.0017615664983168244,
      -0.027821091935038567, -0.02909102663397789, -0.0074163805693387985,
      0.0010265520540997386, -0.03566773235797882, 0.009682231582701206,
      0.04733322188258171, 0.018230309709906578, -0.03985132277011871,
      -0.04506686329841614, -0.039233557879924774, -0.035755984485149384,
      -0.015500095672905445, -0.002680492587387562, 0.00020569164189510047,
      -0.02701638452708721, 0.05700237303972244, 0.07737842202186584,
      -0.008791282773017883, -0.03971007093787193, -0.09086641669273376,
      -0.04226299002766609, 0.038510967046022415, -0.00327216531150043,
      -0.002764645032584667, -0.03462796285748482, 0.027848107740283012,
      0.1197269856929779, 0.016046004369854927, 0.0446307547390461,
      -0.0035232286900281906, 0.00513090705499053, -0.03321830928325653,
      -0.002846207469701767, -0.035052213817834854, 0.04433846101164818,
      0.00831588078290224, -0.009238412603735924, -0.026837648823857307,
      -0.016232581809163094, -0.004062071908265352, 0.020748073235154152,
      -0.03133803978562355, -0.01919063925743103, 0.04514601081609726,
      -0.01409654039889574, -0.06337198615074158, 0.022697314620018005,
      -0.026529774069786072, -0.011428129859268665, -0.08168141543865204,
      -0.041264187544584274, 0.004954838659614325, -0.030592184513807297,
      0.012891897931694984, -0.013786627911031246, 0.057568877935409546,
      -0.01791319064795971, -0.044830404222011566, 0.03858140856027603,
      -0.06352861225605011, 0.01292115356773138, 0.04285573214292526,
      -0.019528597593307495, -0.06718664616346359, -0.03555198758840561,
      -0.004551062826067209, 0.029923485592007637, -0.025518890470266342,
      0.014554541558027267, 0.0010305920150130987, -0.03218819573521614,
      0.006339495535939932, 0.0023478425573557615, -0.0008022435358725488,
      0.027141282334923744, 0.05583159253001213, -0.009831058792769909,
      -0.01583368517458439, -0.02215631864964962, -0.03717975318431854,
      -0.00880734808743, -0.05114077404141426, -0.08333984017372131,
      -0.05661092698574066, -0.02352755144238472, 0.03440704196691513,
      -0.015427721664309502, 0.005319202318787575, -0.03369820863008499,
      0.01227498333901167, 0.033040449023246765, 0.05890839174389839,
      -0.050588592886924744, -0.05148303508758545, -0.0062836287543177605,
      -0.001866364385932684, 0.04949304461479187, 0.04090261831879616,
      -0.0033759509678930044, 0.020548321306705475, -0.12097888439893723,
      0.009809690527617931, 0.0162509735673666, 0.043313588947057724,
      0.027205048128962517, 0.05849847570061684, 0.00889711081981659,
      0.031742487102746964, 0.023981360718607903, -0.04208315536379814,
      0.022326111793518066, -0.07402818650007248, -0.007559708319604397,
      -0.0519276037812233, -0.018082551658153534, 0.06245474889874458,
      -0.04290946200489998, -0.023769551888108253, -0.019430482760071754,
      0.05899464339017868, 0.004161848220974207, 0.05250735953450203,
      0.03991280496120453, -0.01964782364666462, -0.05715089663863182,
      -0.01400905754417181, 0.024014385417103767, -0.030185038223862648,
      -0.002384582534432411, -0.007255095522850752, 0.05171477794647217,
      -0.018896307796239853, -0.0262931939214468, 0.10827744007110596,
      0.0329739935696125, 0.034321073442697525, -0.061536215245723724,
      -0.0014393406454473734, -0.03381297364830971, -0.0033068014308810234,
      -0.019893107935786247, -0.031215528026223183, 0.0043717301450669765,
      0.008531264029443264, 0.04601125046610832, -0.03756995499134064,
      -0.03124001994729042, 0.0022898807656019926, 0.08804833143949509,
      0.013651952147483826, -0.007515436504036188, 0.01915249042212963,
      0.008975568227469921, 0.019521739333868027, -0.0015603393549099565,
      -0.0025994444731622934, 0.0243521798402071, -0.02178623527288437,
      0.030201381072402, 0.001891248277388513, 0.0422317311167717,
      -0.03884027898311615, -0.028931310400366783, 0.003318352624773979,
      -0.03467527776956558, -0.007070434279739857, 0.04377666488289833,
      0.02757354825735092, -0.005261859856545925, 0.002997506642714143,
      0.011937523260712624, -0.013524514622986317, 0.007837275043129921,
      -0.027925534173846245, 0.020203135907649994, 0.046138130128383636,
      -0.019678529351949692, 0.04216928780078888, 0.017280738800764084,
      -0.04188041388988495, -0.027116240933537483, -0.014684638939797878,
      0.00539032556116581, 0.0018227206310257316, 0.060687750577926636,
      -0.05944991856813431, -0.012975968420505524, 0.017582500353455544,
      -0.02025062032043934, -0.01102710235863924, 0.0075369300320744514,
      0.008182710967957973, -0.0046028499491512775, -0.003937548492103815,
      -0.00465896213427186, -0.0478828027844429, -0.004491537343710661,
      0.009290790185332298, 0.06320401281118393, -0.018223349004983902,
      0.031071240082383156, 0.014820342883467674, -0.00916573591530323,
      0.006759860087186098, 0.004911635536700487, 0.052656061947345734,
      0.04273297265172005, -0.002947375411167741, 0.017610933631658554,
      -0.006830541417002678, 0.03348657116293907, 0.002450380241498351,
      0.07924681156873703, 0.0010322973830625415, -0.0003142301575280726,
      0.0022079581394791603, -0.035896167159080505, -0.042046040296554565,
      0.020998479798436165, -0.01798182912170887, 0.056106701493263245,
      0.014476092532277107, -0.050287481397390366, -0.02690364606678486,
      -0.013541940599679947, 0.0394633449614048, 0.007878861390054226,
      0.014322971925139427, 0.04788161441683769, 0.01685190759599209,
      -0.0008333620498888195, -0.037093617022037506, 0.004784474149346352,
      0.02596340887248516, 0.031144246459007263, -0.004417959600687027,
      0.03629688918590546, -0.04439303278923035, -0.008672254160046577,
      -0.013786965981125832, -0.03755061700940132, 0.022862350568175316,
      0.005698224995285273, 0.0006983354105614126, -0.00448948610574007,
      0.007605621125549078, 0.009463248774409294, -0.045089319348335266,
      -0.0012570773251354694, 0.03282192349433899, 0.0025296404492110014,
      0.014909347519278526, -0.03585172817111015, -0.004181691911071539,
      -0.04523594677448273, 0.05553409457206726, -0.0134842898696661,
      0.008065459318459034, -0.04750613123178482, -0.017395801842212677,
      0.035250045359134674, 0.020173627883195877, 0.0003130328841507435,
      -0.00759688438847661, -0.03617217764258385, 0.02377650886774063,
      -0.04584865644574165, -0.0090232715010643, 0.007342859171330929,
      0.0343688502907753, 0.02804487757384777, -0.00956425629556179,
      -0.01113677304238081, 0.05933770537376404, -0.026347434148192406,
      0.013227776624262333, 0.035185087472200394, -0.031752411276102066,
      -0.011655616573989391, 0.007124662399291992, -0.0003054417611565441,
      0.04705354571342468, -0.021363137289881706, 0.0016397538129240274,
      0.028028355911374092, 0.047786179929971695, -0.029729506000876427,
      0.005472415126860142, -0.04007025435566902, -0.02174403704702854,
      -0.03820686414837837, -0.01998956874012947, -0.018438003957271576,
      -0.05919633433222771, 0.022058384492993355, -0.0005733727593906224,
      -0.018703220412135124, -0.02923653833568096, 0.009353868663311005,
      -0.012979201972484589, 0.021732181310653687, -0.03146161884069443,
      -0.027475738897919655, 0.05645129084587097, 0.012957732193171978,
      0.03974122554063797, -0.0152755007147789, 0.0428101010620594,
      -0.02466552145779133, 0.0032160081900656223, -0.04446440562605858,
      0.017717553302645683, 0.02293989807367325, 0.021175360307097435,
      0.047574590891599655, -0.023032229393720627, 0.021616820245981216,
      0.0002482199342921376, -0.011953807435929775, 0.006272297352552414,
      0.044687844812870026, -0.012160634621977806, 0.0015876578399911523,
      0.012709937989711761, -0.030987242236733437, 0.0538477785885334,
      0.0057610757648944855, 0.047493789345026016, 0.020140741020441055,
      -0.04928832873702049, -0.04269246384501457, -0.0144782280549407,
      -0.0730268731713295, -0.005616151262074709, -0.0023840663488954306,
      0.006466759368777275, 0.0020096641965210438, -0.00992012768983841,
      -0.02848341502249241, 0.009041243232786655, 0.013166585005819798,
      -0.00007953252497827634, 0.030453607439994812, -0.03161391615867615,
      0.015993192791938782, 0.015304222702980042, 0.035953130573034286,
      0.03881837800145149, -0.028071410953998566, -0.07997464388608932,
      0.014604742638766766, -0.03150634840130806, 0.05636206641793251,
      -0.02929120883345604, -0.0778835192322731, 0.008338273502886295,
      -0.03032403253018856, -0.04381968826055527, -0.09423040598630905,
      -0.09065733104944229, -0.01131393387913704, -0.025004589930176735,
      -0.02877914533019066, -0.05330532789230347, -0.0013139225775375962,
      -0.05769437551498413, 0.009524191729724407, 0.05869695544242859,
      -0.013240515254437923, -0.028868408873677254, -0.001789339235983789,
      -0.06881550699472427, 0.012942478060722351, 0.03101087361574173,
      -0.01192118413746357, -0.03598858788609505, 0.005486578680574894,
      -0.06154429540038109, 0.05729552358388901, 0.013215450569987297,
      0.10162689536809921, 0.08635906875133514, 0.0986223816871643,
      -0.003257784992456436, 0.0002255132858408615, -0.033937979489564896,
      0.021747061982750893, 0.03340046480298042, -0.021880628541111946,
      0.07126061618328094, 0.02621910534799099, -0.026068128645420074,
      0.01858997531235218, 0.07367660850286484, 0.03913252055644989,
      0.01808866672217846, -0.03912363573908806, 0.013959705829620361,
      0.012976580299437046, 0.05090850964188576, 0.031330712139606476,
      -0.0333344005048275, 0.0014409233117476106, 0.06329599767923355,
      -0.011735188774764538, 0.03824691101908684, 0.04491550475358963,
      0.012765506282448769, 0.020529786124825478, 0.018355267122387886,
      0.01910625770688057, -0.03137703239917755, -0.07307509332895279,
      -0.0842125415802002, 0.020765062421560287, -0.002240122528746724,
      0.029963959008455276, -0.06783852726221085, 0.0025490953121334314,
      0.09624412655830383, -0.019528405740857124, -0.0173611082136631,
      -0.008387023583054543, 0.019009776413440704, -0.015958115458488464,
      -0.05986117199063301, 0.00811261311173439, -0.007306947838515043,
      -0.00022843289480078965, -0.01948578841984272, -0.002734219189733267,
      -0.06880103796720505, 0.04410288482904434, 0.03952198103070259,
      -0.004344519693404436, 0.011804932728409767, -0.01846909709274769,
      0.030777450650930405, -0.05086949095129967, -0.0323001854121685,
      -0.060374192893505096, -0.038837142288684845, -0.025488905608654022,
      0.04689627140760422, 0.060029562562704086, 0.03948122262954712,
      0.04652051255106926, 0.030402714386582375, -0.003111948724836111,
      0.00987427867949009, -0.06259570270776749, 0.0005564240855164826,
      -0.06718821078538895, 0.05248076468706131, 0.016719868406653404,
      -0.0014331189449876547, -0.0003994909056928009, -0.002852911362424493,
      -0.03395173326134682, 0.017260953783988953, -0.0103565389290452,
      0.007360309828072786, -0.00833031814545393, -0.055076420307159424,
      -0.010890590026974678, 0.03388139605522156, 0.057957205921411514,
      -0.015248036943376064, 0.0339512899518013, 0.0024192340206354856,
      0.0024420414119958878, 0.010462603531777859, 0.008196515962481499,
      0.011702110059559345, -0.07198450714349747, 0.024949781596660614,
      0.03805084154009819, 0.04367814585566521, 0.034673627465963364,
      0.09861249476671219, -0.020546333864331245, -0.035971589386463165,
      -0.05644650012254715, 0.03462139889597893, -0.004220909904688597,
      0.01734836958348751, -0.014755372889339924, -0.013674736022949219,
      0.05066261813044548, -0.10298490524291992, -0.02679564245045185,
      0.07046494632959366, -0.013375882059335709, -0.04698584973812103,
      -0.03941798582673073, 0.034070346504449844, -0.020289281383156776,
      0.05984782800078392, 0.04787976294755936, 0.04326889291405678,
      -0.018722226843237877, 0.014538106508553028, -0.007078094873577356,
      0.0006185739766806364, -0.005120695568621159, 0.11264444887638092,
      -0.05646297335624695, -0.03024481236934662, -0.00019625635468401015,
      0.33903805166483, -0.03269244357943535, -0.024646488949656487,
      0.04235611855983734, -0.04244253784418106, 0.025243284180760384,
      0.05638871341943741, 0.04112765192985535, 0.049878545105457306,
      0.011412222869694233, 0.023790044710040092, 0.0011816920014098287,
      0.04298638924956322, 0.0038389358669519424, -0.024448642507195473,
      -0.002785294083878398, -0.007799903396517038, 0.010157370008528233,
      -0.10270491242408752, 0.07012203335762024, -0.019884394481778145,
      -0.09828393906354904, -0.011931604705750942, 0.022069664672017097,
      -0.007991510443389416, -0.01846075989305973, -0.0314301960170269,
      -0.01680879481136799, -0.013369860127568245, -0.019527310505509377,
      0.007355779409408569, 0.03505146875977516, 0.032996416091918945,
      -0.04266468062996864, 0.009325706399977207, -0.024906685575842857,
      0.01460751798003912, 0.04759286344051361, -0.027897587046027184,
      0.06117965281009674, -0.01785694621503353, -0.020876441150903702,
      -0.011870394460856915, 0.0686734989285469, 0.04038060083985329,
      0.02094779722392559, 0.00887977983802557, 0.038402944803237915,
      -0.06479512155056, -0.04767417162656784, 0.0001438069884898141,
      -0.012996937148272991, -0.0377083458006382, 0.026729021221399307,
      -0.0698314979672432, -0.06267857551574707,
    ];

    // 7. Create and upsert vectors in batches of 100
    const batchSize = 100;
    let batch: any = [];
    for (let idx = 0; idx < chunks.length; idx++) {
      const chunk = chunks[idx];
      const vector = {
        id: `${txtPath}_${idx}`,
        values: embeddingsArrays[idx],
        metadata: {
          ...chunk.metadata,
          loc: JSON.stringify(chunk.metadata.loc),
          pageContent: chunk.pageContent,
          txtPath: txtPath,
        },
      };
      console.log(vector);
      batch = [...batch, vector];
      // When batch is full or it's the last item, upsert the vectors
      if (batch.length === batchSize || idx === chunks.length - 1) {
        await index.upsert({
          upsertRequest: {
            vectors: batch,
          },
        });
        // Empty the batch
        batch = [];
      }
    }
    // 8. Log the number of vectors updated
    console.log(`Pinecone index updated with ${chunks.length} vectors`);
  }
};
// export const queryPineconeVectorStoreAndQueryLLM = async (
//   client: any,
//   indexName: string,
//   question: string
// ) => {
//   // 1. Start query process
//   console.log("Querying Pinecone vector store...");
//   // 2. Retrieve the Pinecone index
//   const index = client.Index(indexName);
//   // 3. Create query embedding
//   const queryEmbedding = await new OpenAIEmbeddings().embedQuery(question);
//   // 4. Query Pinecone index and return top 10 matches
//   let queryResponse = await index.query({
//     queryRequest: {
//       topK: 10,
//       vector: queryEmbedding,
//       includeMetadata: true,
//       includeValues: true,
//     },
//   });
//   // 5. Log the number of matches
//   console.log(`Found ${queryResponse.matches.length} matches...`);
//   // 6. Log the question being asked
//   console.log(`Asking question: ${question}...`);
//   if (queryResponse.matches.length) {
//     // 7. Create an OpenAI instance and load the QAStuffChain
//     const llm = new OpenAI({
//       configuration: {
//         baseURL: "https://openrouter.ai/api/v1",
//       },
//       apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY!,
//       model: "gpt-3.5-turbo",
//       temperature: 0.8,
//       verbose: true,
//     });
//     const chain = loadQAStuffChain(llm);
//     // 8. Extract and concatenate page content from matched documents
//     const concatenatedPageContent = queryResponse.matches
//       .map((match: any) => match.metadata.pageContent)
//       .join(" ");
//     // 9. Execute the chain with input documents and question
//     const stream = await chain.stream({
//       input_documents: [new Document({ pageContent: concatenatedPageContent })],
//       question: question,
//     });

//     return stream;
//     // 10. Log the answer
//     // console.log(`Answer: ${result.}`);
//     // return result.text;
//   } else {
//     // 11. Log that there are no matches, so GPT-3 will not be queried
//     console.log("Since there are no matches, GPT-3 will not be queried.");
//   }
// };
